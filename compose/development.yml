# docker-compose file for local development and testing with container image.
#
# Extends compose/base.yml so launch services via:
#
#   docker-compose -f compose/base.yml -f compose/development.yml
version: '3.2'
services:

  # Main web application service
  development_app:
    build:
      context: ..
      dockerfile: ./compose/development.Dockerfile

    expose:
      - "8000"

    ports:
      - "8000:8000"

    env_file:
      - base.env
      - development.env

    depends_on:
      - "preferences-db"
      - "mailhog"
      - "frontend_watch"

    # Options stdin_open and tty are set to allow you to attach to the container for the purposes
    # of debugging.
    # See https://blog.lucasferreira.org/howto/2017/06/03/running-pdb-with-docker-and-gunicorn.html
    stdin_open: true
    tty: true

    # For development, mount the local directory inside the container as a
    # volume to allow local changes to be reflected without having to re-build
    # the container.
    volumes:
      - type: bind
        source: ../
        target: /usr/src/app
        read_only: true
      - type: volume
        source: pudb-config
        target: /root/.config/pudb
      - "frontend_build:/tmp/frontend_build"

    environment:
      DJANGO_FRONTEND_APP_BUILD_DIR: "/tmp/frontend_build"

  # Front end which is continually re-build using webpack's watch support. Used
  # to provide an updated source of files for the Django app.
  frontend_watch:
    build:
      context: ..
      dockerfile: ./compose/development.frontend.Dockerfile

    volumes:
      # For the frontend, mount the local frontend directories inside the container
      # as a volume to allow local changes to be reflected without having to
      # re-build the container.
      - type: bind
        source: ../ui/frontend/src
        target: /usr/src/app/src
        read_only: true
      - type: bind
        source: ../ui/frontend/public
        target: /usr/src/app/public
        read_only: true
      - "frontend_build:/tmp/frontend_build"
    command: ["run", "watch"]
    environment:
      APP_BUILD: "/tmp/frontend_build"

  # Front end live documentation
  frontend_styleguidist:
    build:
      context: ..
      dockerfile: ./compose/development.frontend.Dockerfile

    volumes:
      # For the frontend, mount the local frontend directory inside the container
      # as a volume to allow local changes to be reflected without having to
      # re-build the container.
      - type: bind
        source: ../ui/frontend/src
        target: /usr/src/app/src
        read_only: true
      - type: bind
        source: ../ui/frontend/public
        target: /usr/src/app/public
        read_only: true
    expose:
      - "6060"
    ports:
      - "6060:6060"
    command: ["run", "styleguidist-server"]

  # Swagger
  swagger:
    image: swaggerapi/swagger-ui
    expose:
      - "8080"
    ports:
      - "7000:8080"
    depends_on:
      - "development_app"
    environment:
      API_URL: http://localhost:8000/api/swagger.json

volumes:
  # A persistent volume to preserve the pudb configuration.
  pudb-config:
  frontend_build:
